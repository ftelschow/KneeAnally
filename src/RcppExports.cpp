// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// NumMat2armaMat
arma::mat NumMat2armaMat(NumericMatrix x);
RcppExport SEXP _KneeAnally_NumMat2armaMat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(NumMat2armaMat(x));
    return rcpp_result_gen;
END_RCPP
}
// armaMat2NumMat
NumericMatrix armaMat2NumMat(arma::mat x);
RcppExport SEXP _KneeAnally_armaMat2NumMat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(armaMat2NumMat(x));
    return rcpp_result_gen;
END_RCPP
}
// QuatMultC
NumericVector QuatMultC(NumericVector q1, NumericVector q2);
RcppExport SEXP _KneeAnally_QuatMultC(SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(QuatMultC(q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// QuatMultC2
arma::vec QuatMultC2(arma::vec q1, arma::vec q2);
RcppExport SEXP _KneeAnally_QuatMultC2(SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(QuatMultC2(q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// QuatInvC
NumericVector QuatInvC(NumericVector q);
RcppExport SEXP _KneeAnally_QuatInvC(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(QuatInvC(q));
    return rcpp_result_gen;
END_RCPP
}
// QuatInvC2
arma::vec QuatInvC2(arma::vec q);
RcppExport SEXP _KneeAnally_QuatInvC2(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(QuatInvC2(q));
    return rcpp_result_gen;
END_RCPP
}
// Rot2EulerC
NumericVector Rot2EulerC(arma::mat R);
RcppExport SEXP _KneeAnally_Rot2EulerC(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Rot2EulerC(R));
    return rcpp_result_gen;
END_RCPP
}
// Euler2QuatCe
arma::vec Euler2QuatCe(double angle, CharacterVector coord);
RcppExport SEXP _KneeAnally_Euler2QuatCe(SEXP angleSEXP, SEXP coordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type coord(coordSEXP);
    rcpp_result_gen = Rcpp::wrap(Euler2QuatCe(angle, coord));
    return rcpp_result_gen;
END_RCPP
}
// Euler2QuatC
NumericVector Euler2QuatC(arma::vec angles);
RcppExport SEXP _KneeAnally_Euler2QuatC(SEXP anglesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type angles(anglesSEXP);
    rcpp_result_gen = Rcpp::wrap(Euler2QuatC(angles));
    return rcpp_result_gen;
END_RCPP
}
// Quat2RotC
arma::mat Quat2RotC(arma::vec q);
RcppExport SEXP _KneeAnally_Quat2RotC(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(Quat2RotC(q));
    return rcpp_result_gen;
END_RCPP
}
// Rot2QuatC
arma::vec Rot2QuatC(arma::mat R);
RcppExport SEXP _KneeAnally_Rot2QuatC(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Rot2QuatC(R));
    return rcpp_result_gen;
END_RCPP
}
// IntrinsicDistSO3C
double IntrinsicDistSO3C(arma::vec q, arma::vec p);
RcppExport SEXP _KneeAnally_IntrinsicDistSO3C(SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(IntrinsicDistSO3C(q, p));
    return rcpp_result_gen;
END_RCPP
}
// ExpSO3C
arma::mat ExpSO3C(arma::mat A);
RcppExport SEXP _KneeAnally_ExpSO3C(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(ExpSO3C(A));
    return rcpp_result_gen;
END_RCPP
}
// LogSO3C
arma::mat LogSO3C(arma::mat R);
RcppExport SEXP _KneeAnally_LogSO3C(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSO3C(R));
    return rcpp_result_gen;
END_RCPP
}
// Vec2screwMC
arma::mat Vec2screwMC(double xx, double yy, double zz);
RcppExport SEXP _KneeAnally_Vec2screwMC(SEXP xxSEXP, SEXP yySEXP, SEXP zzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type yy(yySEXP);
    Rcpp::traits::input_parameter< double >::type zz(zzSEXP);
    rcpp_result_gen = Rcpp::wrap(Vec2screwMC(xx, yy, zz));
    return rcpp_result_gen;
END_RCPP
}
// ScrewM2VecC
arma::mat ScrewM2VecC(arma::mat A);
RcppExport SEXP _KneeAnally_ScrewM2VecC(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(ScrewM2VecC(A));
    return rcpp_result_gen;
END_RCPP
}
// distFT1C
double distFT1C(arma::mat f, arma::mat g);
RcppExport SEXP _KneeAnally_distFT1C(SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(distFT1C(f, g));
    return rcpp_result_gen;
END_RCPP
}
// distFT2C
double distFT2C(arma::mat f, arma::mat g);
RcppExport SEXP _KneeAnally_distFT2C(SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(distFT2C(f, g));
    return rcpp_result_gen;
END_RCPP
}
// distFTC
double distFTC(arma::mat f, arma::mat g);
RcppExport SEXP _KneeAnally_distFTC(SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(distFTC(f, g));
    return rcpp_result_gen;
END_RCPP
}
// OptPosQuatC
arma::mat OptPosQuatC(arma::mat A, arma::vec qRef);
RcppExport SEXP _KneeAnally_OptPosQuatC(SEXP ASEXP, SEXP qRefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qRef(qRefSEXP);
    rcpp_result_gen = Rcpp::wrap(OptPosQuatC(A, qRef));
    return rcpp_result_gen;
END_RCPP
}
// ProjectiveMeanC
arma::vec ProjectiveMeanC(arma::mat L, int MaxIt, double err);
RcppExport SEXP _KneeAnally_ProjectiveMeanC(SEXP LSEXP, SEXP MaxItSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIt(MaxItSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    rcpp_result_gen = Rcpp::wrap(ProjectiveMeanC(L, MaxIt, err));
    return rcpp_result_gen;
END_RCPP
}
// RotEstimC
arma::mat RotEstimC(arma::mat A, arma::mat B);
RcppExport SEXP _KneeAnally_RotEstimC(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(RotEstimC(A, B));
    return rcpp_result_gen;
END_RCPP
}
// GeodesicInterpolationC
NumericMatrix GeodesicInterpolationC(NumericMatrix f, NumericVector times, NumericVector new_times);
RcppExport SEXP _KneeAnally_GeodesicInterpolationC(SEXP fSEXP, SEXP timesSEXP, SEXP new_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_times(new_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(GeodesicInterpolationC(f, times, new_times));
    return rcpp_result_gen;
END_RCPP
}
// optimV
List optimV(NumericMatrix f, NumericMatrix g, NumericMatrix V, NumericVector times_g, double b, double R);
RcppExport SEXP _KneeAnally_optimV(SEXP fSEXP, SEXP gSEXP, SEXP VSEXP, SEXP times_gSEXP, SEXP bSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times_g(times_gSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(optimV(f, g, V, times_g, b, R));
    return rcpp_result_gen;
END_RCPP
}
// timeWarp
NumericMatrix timeWarp(NumericMatrix f, NumericMatrix g, double b);
RcppExport SEXP _KneeAnally_timeWarp(SEXP fSEXP, SEXP gSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(timeWarp(f, g, b));
    return rcpp_result_gen;
END_RCPP
}
// timeWarp2
NumericMatrix timeWarp2(NumericMatrix f, NumericMatrix g, int factorN2M, double b);
RcppExport SEXP _KneeAnally_timeWarp2(SEXP fSEXP, SEXP gSEXP, SEXP factorN2MSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type factorN2M(factorN2MSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(timeWarp2(f, g, factorN2M, b));
    return rcpp_result_gen;
END_RCPP
}
// rSampleExp
List rSampleExp(NumericMatrix x, NumericMatrix y, NumericMatrix z);
RcppExport SEXP _KneeAnally_rSampleExp(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rSampleExp(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// array2cube
arma::cube array2cube(SEXP myArray);
RcppExport SEXP _KneeAnally_array2cube(SEXP myArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type myArray(myArraySEXP);
    rcpp_result_gen = Rcpp::wrap(array2cube(myArray));
    return rcpp_result_gen;
END_RCPP
}
// PermTestLoop
NumericVector PermTestLoop(int M, arma::cube dataAligned, IntegerMatrix perm, IntegerMatrix permC);
RcppExport SEXP _KneeAnally_PermTestLoop(SEXP MSEXP, SEXP dataAlignedSEXP, SEXP permSEXP, SEXP permCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type dataAligned(dataAlignedSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type perm(permSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type permC(permCSEXP);
    rcpp_result_gen = Rcpp::wrap(PermTestLoop(M, dataAligned, perm, permC));
    return rcpp_result_gen;
END_RCPP
}
// PermTest2Loop
arma::mat PermTest2Loop(int M, arma::cube dataAligned, arma::mat perm, arma::mat permC);
RcppExport SEXP _KneeAnally_PermTest2Loop(SEXP MSEXP, SEXP dataAlignedSEXP, SEXP permSEXP, SEXP permCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type dataAligned(dataAlignedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type perm(permSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type permC(permCSEXP);
    rcpp_result_gen = Rcpp::wrap(PermTest2Loop(M, dataAligned, perm, permC));
    return rcpp_result_gen;
END_RCPP
}
// PermTest3Loop
arma::vec PermTest3Loop(int M, arma::cube dataAligned, arma::mat perm, arma::mat permC, int N2Mfac, double b);
RcppExport SEXP _KneeAnally_PermTest3Loop(SEXP MSEXP, SEXP dataAlignedSEXP, SEXP permSEXP, SEXP permCSEXP, SEXP N2MfacSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type dataAligned(dataAlignedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type perm(permSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type permC(permCSEXP);
    Rcpp::traits::input_parameter< int >::type N2Mfac(N2MfacSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(PermTest3Loop(M, dataAligned, perm, permC, N2Mfac, b));
    return rcpp_result_gen;
END_RCPP
}
// TestC
arma::vec TestC(int a, int b, int N);
RcppExport SEXP _KneeAnally_TestC(SEXP aSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(TestC(a, b, N));
    return rcpp_result_gen;
END_RCPP
}
// Test
int Test(arma::vec v);
RcppExport SEXP _KneeAnally_Test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Test(v));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _KneeAnally_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _KneeAnally_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _KneeAnally_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _KneeAnally_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KneeAnally_NumMat2armaMat", (DL_FUNC) &_KneeAnally_NumMat2armaMat, 1},
    {"_KneeAnally_armaMat2NumMat", (DL_FUNC) &_KneeAnally_armaMat2NumMat, 1},
    {"_KneeAnally_QuatMultC", (DL_FUNC) &_KneeAnally_QuatMultC, 2},
    {"_KneeAnally_QuatMultC2", (DL_FUNC) &_KneeAnally_QuatMultC2, 2},
    {"_KneeAnally_QuatInvC", (DL_FUNC) &_KneeAnally_QuatInvC, 1},
    {"_KneeAnally_QuatInvC2", (DL_FUNC) &_KneeAnally_QuatInvC2, 1},
    {"_KneeAnally_Rot2EulerC", (DL_FUNC) &_KneeAnally_Rot2EulerC, 1},
    {"_KneeAnally_Euler2QuatCe", (DL_FUNC) &_KneeAnally_Euler2QuatCe, 2},
    {"_KneeAnally_Euler2QuatC", (DL_FUNC) &_KneeAnally_Euler2QuatC, 1},
    {"_KneeAnally_Quat2RotC", (DL_FUNC) &_KneeAnally_Quat2RotC, 1},
    {"_KneeAnally_Rot2QuatC", (DL_FUNC) &_KneeAnally_Rot2QuatC, 1},
    {"_KneeAnally_IntrinsicDistSO3C", (DL_FUNC) &_KneeAnally_IntrinsicDistSO3C, 2},
    {"_KneeAnally_ExpSO3C", (DL_FUNC) &_KneeAnally_ExpSO3C, 1},
    {"_KneeAnally_LogSO3C", (DL_FUNC) &_KneeAnally_LogSO3C, 1},
    {"_KneeAnally_Vec2screwMC", (DL_FUNC) &_KneeAnally_Vec2screwMC, 3},
    {"_KneeAnally_ScrewM2VecC", (DL_FUNC) &_KneeAnally_ScrewM2VecC, 1},
    {"_KneeAnally_distFT1C", (DL_FUNC) &_KneeAnally_distFT1C, 2},
    {"_KneeAnally_distFT2C", (DL_FUNC) &_KneeAnally_distFT2C, 2},
    {"_KneeAnally_distFTC", (DL_FUNC) &_KneeAnally_distFTC, 2},
    {"_KneeAnally_OptPosQuatC", (DL_FUNC) &_KneeAnally_OptPosQuatC, 2},
    {"_KneeAnally_ProjectiveMeanC", (DL_FUNC) &_KneeAnally_ProjectiveMeanC, 3},
    {"_KneeAnally_RotEstimC", (DL_FUNC) &_KneeAnally_RotEstimC, 2},
    {"_KneeAnally_GeodesicInterpolationC", (DL_FUNC) &_KneeAnally_GeodesicInterpolationC, 3},
    {"_KneeAnally_optimV", (DL_FUNC) &_KneeAnally_optimV, 6},
    {"_KneeAnally_timeWarp", (DL_FUNC) &_KneeAnally_timeWarp, 3},
    {"_KneeAnally_timeWarp2", (DL_FUNC) &_KneeAnally_timeWarp2, 4},
    {"_KneeAnally_rSampleExp", (DL_FUNC) &_KneeAnally_rSampleExp, 3},
    {"_KneeAnally_array2cube", (DL_FUNC) &_KneeAnally_array2cube, 1},
    {"_KneeAnally_PermTestLoop", (DL_FUNC) &_KneeAnally_PermTestLoop, 4},
    {"_KneeAnally_PermTest2Loop", (DL_FUNC) &_KneeAnally_PermTest2Loop, 4},
    {"_KneeAnally_PermTest3Loop", (DL_FUNC) &_KneeAnally_PermTest3Loop, 6},
    {"_KneeAnally_TestC", (DL_FUNC) &_KneeAnally_TestC, 3},
    {"_KneeAnally_Test", (DL_FUNC) &_KneeAnally_Test, 1},
    {"_KneeAnally_rcpparma_hello_world", (DL_FUNC) &_KneeAnally_rcpparma_hello_world, 0},
    {"_KneeAnally_rcpparma_outerproduct", (DL_FUNC) &_KneeAnally_rcpparma_outerproduct, 1},
    {"_KneeAnally_rcpparma_innerproduct", (DL_FUNC) &_KneeAnally_rcpparma_innerproduct, 1},
    {"_KneeAnally_rcpparma_bothproducts", (DL_FUNC) &_KneeAnally_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_KneeAnally(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
